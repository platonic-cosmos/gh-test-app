name: Build Python App

on:
  push:
    branches: main

env:
  APP_NAME: gh-test
  GCP_PROJECT_ID: png-gcp-learning-poc
  REPO_NAME: gh-test-iac


jobs:
  build-fastapi-app:
    name: Build FastAPI App
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      actions: read
      checks: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Install dependencies
        run: |
          pwd
          ls -l
          pip install -r requirements.txt
          pip install pytest pytest-md pytest-emoji pytest-cov

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      - name: Run unit tests
        uses: pavelzw/pytest-action@v2
        with:
          verbose: true
          emoji: false
          job-summary: true
          custom-arguments: '-q'
          click-to-expand: false
          report-title: 'Unit Tests Report'
      
      - name: Generate code coverage
        run: |
          pytest . --cov-report xml:test-coverage.xml --cov=. --junitxml=test-results/test-results.xml
      
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-coverage-report
          path: test-coverage.xml

      - name: Archive unit tests results
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-results
          path: test-results.xml

      # - name: Gitleaks - scan for passwords, tokens, etc.
      #   uses: gitleaks/gitleaks-action@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      # - name: Code quality scan using SonarQube
      #   uses: sonarsource/sonarqube-scan-action@v2.3.0
      #   continue-on-error: true
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      #   with:
      #     projectBaseDir: .
      #     args: >
      #       -Dsonar.projectKey=${{ env.APP_NAME }}
      #       -Dsonar.python.coverage.reportPaths=test-coverage.xml

      - name: Auth Docker
        run: gcloud --quiet auth configure-docker us-east4-docker.pkg.dev
      
      - name: Build Docker image
        shell: bash
        run: |-
          app_name_lowercase=$(echo "${{ env.APP_NAME }}" | awk '{print tolower($0)}')
          docker build --tag "us-east4-docker.pkg.dev/png-gcp-learning-poc/python-fastapi/$app_name_lowercase:${{github.run_number}}" .
      
      - name: Push to Artifact Registry
        shell: bash
        run: |-
          app_name_lowercase=$(echo "${{ env.APP_NAME }}" | awk '{print tolower($0)}')
          docker push us-east4-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/python-fastapi/$app_name_lowercase:${{github.run_number}}
          gcloud container images add-tag us-east4-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/python-fastapi/$app_name_lowercase:${{github.run_number}} us-east4-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/python-fastapi/$app_name_lowercase:latest

      - name: Call CD workflow
        run: |
          curl -L -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.ORG_GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/repos/platonic-cosmos/${{ env.REPO_NAME }}/dispatches" -d '{"event_type":"on-demand-test","client_payload":{"unit":false,"integration":true}}'
  
